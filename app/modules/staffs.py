import tkinter as tk
from tkinter import ttk, messagebox

# ==================================
# KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C
# ==================================
entries = {}
tree = None
add_btn, update_btn, delete_btn = None, None, None
search_entry = None
master_data_list = []

# --- THAY ƒê·ªîI: ƒê·ªãnh nghƒ©a tr∆∞·ªùng d·ªØ li·ªáu cho Nh√¢n vi√™n ---
FIELD_GROUPS = {
    "tab1": {
        "labels": ["M√£ NV:", "H·ªç v√† t√™n:", "Ng√†y sinh (dd/mm/yy):", "Gi·ªõi t√≠nh:", "CMND/CCCD:"],
        "keys": ["ma_nv", "ho_ten", "ngay_sinh", "gioi_tinh", "cmnd_cccd"]
    },
    "tab2": {
        "labels": ["S·ªë ƒëi·ªán tho·∫°i:", "Email:", "Qu√™ qu√°n:", "ƒê·ªãa ch·ªâ hi·ªán t·∫°i:"],
        "keys": ["sdt", "email", "que_quan", "dia_chi"]
    },
    "tab3": {
        "labels": ["Ch·ª©c v·ª•:", "Ng√†y v√†o l√†m:", "Ca tr·ª±c:", "L∆∞∆°ng CB (VND):", "Tr·∫°ng th√°i:", "Ghi ch√∫:"],
        "keys": ["chuc_vu", "ngay_vao_lam", "ca_truc", "luong_cb", "trang_thai_lv", "ghi_chu"]
    }
}
ALL_FIELD_KEYS = FIELD_GROUPS["tab1"]["keys"] + FIELD_GROUPS["tab2"]["keys"] + FIELD_GROUPS["tab3"]["keys"]

def show_staff_management(root):
    """Giao di·ªán Qu·∫£n l√Ω Nh√¢n vi√™n - D·ª±a tr√™n form Sinh vi√™n"""
    global entries, tree, add_btn, update_btn, delete_btn, search_entry, master_data_list
    
    master_data_list = []
    entries = {}

    for widget in root.winfo_children():
        widget.destroy()

    # ====== C·∫§U H√åNH C·ª¨A S·ªî ======
    root.title("üë®‚Äçüîß Qu·∫£n l√Ω Nh√¢n vi√™n - H·ªá th·ªëng Qu·∫£n l√Ω K√Ω t√∫c x√°")
    root.geometry("1280x670") 
    root.configure(bg="#f0f4ff")

    # ============================
    # ====== STYLE N√ÇNG CAO ======
    # ============================
    style = ttk.Style()
    style.theme_use("clam")

    # --- N·ªÅn v√† Khung ---
    style.configure("TFrame", background="#f0f4ff") # N·ªÅn xanh nh·∫°t
    style.configure("White.TFrame", background="white") # N·ªÅn tr·∫Øng
    
    # --- Ti√™u ƒë·ªÅ ---
    style.configure("Title.TLabel", background="white", foreground="#1e3a8a", font=("Segoe UI", 16, "bold"))
    style.configure("Header.TLabel", background="white", foreground="#1e3a8a", font=("Segoe UI", 13, "bold"))
    style.configure("TLabel", background="white", foreground="#0f172a", font=("Segoe UI", 11))
                    
    # --- Widget nh·∫≠p li·ªáu ---
    style.configure("TEntry", fieldbackground="white", font=("Segoe UI", 11), padding=4)
    style.configure("TCombobox", fieldbackground="white", font=("Segoe UI", 11), padding=4)
    style.map("TCombobox",
        arrowcolor=[('!readonly', 'white')],
        fieldbackground=[('readonly', 'white')],
        selectbackground=[('readonly', '#dbeafe')],
        selectforeground=[('readonly', 'black')]
    )

    # --- C√ÅC N√öT B·∫§M (M√ÄU N·ªîI B·∫¨T) ---
    btn_padding = (10, 7)
    style.configure("Primary.TButton", font=("Segoe UI", 11, "bold"), padding=btn_padding,
                    background="#0ea5e9", foreground="white", borderwidth=0)
    style.map("Primary.TButton", 
              background=[("active", "#0284c7"), ("disabled", "#9ca3af")])
    style.configure("Danger.TButton", font=("Segoe UI", 11, "bold"), padding=btn_padding,
                    background="#e11d48", foreground="white", borderwidth=0)
    style.map("Danger.TButton", 
              background=[("active", "#be123c"), ("disabled", "#9ca3af")])
    style.configure("Secondary.TButton", font=("Segoe UI", 11, "bold"), padding=btn_padding,
                    background="#a1a1aa", foreground="white", borderwidth=0)
    style.map("Secondary.TButton", 
              background=[("active", "#71717a")])
    style.configure("Back.TButton", font=("Segoe UI", 11, "bold"), padding=(10, 8),
                    background="#1e3a8a", foreground="white", borderwidth=0)
    style.map("Back.TButton", background=[("active", "#2563eb")])
              
    # --- Treeview ---
    style.configure("Treeview.Heading", font=("Segoe UI", 11, "bold"), 
                    background="#e0e7ff", foreground="#1e3a8a", padding=10)
    style.configure("Treeview", font=("Segoe UI", 10), rowheight=27,
                    background="white", fieldbackground="white")
    style.map("Treeview",
              background=[("selected", "#dbeafe")], 
              foreground=[("selected", "black")])

    # --- Style cho Notebook (Tabs) ---
    style.configure("TNotebook", background="white", borderwidth=0)
    style.configure("TNotebook.Tab", 
                    font=("Segoe UI", 10, "bold"), 
                    padding=(12, 7), 
                    background="#f1f5f9", foreground="#64748b", borderwidth=0)
    style.map("TNotebook.Tab",
              background=[("selected", "#e0e7ff")],
              foreground=[("selected", "#1e3a8a")])
    style.configure("TNotebook.Pane", background="white", borderwidth=1, 
                    relief="solid", bordercolor="#cbd5e1")

    # ==========================
    # ====== HEADER CH√çNH ======
    # ==========================
    header = tk.Frame(root, bg="#1e3a8a", height=70)
    header.pack(fill="x", side="top")
    header.pack_propagate(False)

    # --- THAY ƒê·ªîI: Ti√™u ƒë·ªÅ ---
    tk.Label(header, text="üë®‚Äçüîß Qu·∫£n l√Ω Nh√¢n vi√™n", bg="#1e3a8a", fg="white",
             font=("Segoe UI", 18, "bold")).pack(side="left", padx=20, pady=12)
    ttk.Button(header, text="‚¨Ö Quay l·∫°i Trang ch·ªß", style="Back.TButton",
               command=lambda: go_back_to_home(root)).pack(side="right", padx=20, pady=10)

    # ========================================
    # ====== B·ªê C·ª§C CH√çNH (Layout ·ªîn ƒë·ªãnh) ======
    # ========================================
    
    main_container = ttk.Frame(root, style="TFrame", padding=(20, 15, 20, 20))
    main_container.pack(fill="both", expand=True, side="bottom")
    
    # --- KHUNG ƒêI·ªÄU KHI·ªÇN (B√äN TR√ÅI) ---
    left_wrapper = ttk.Frame(main_container, style="White.TFrame", 
                             borderwidth=1, relief="solid")
    left_wrapper.pack(side="left", fill="y", padx=(0, 15))
    
    left_pane = ttk.Frame(left_wrapper, style="White.TFrame", width=460)
    left_pane.pack(fill="y", expand=True)
    left_pane.pack_propagate(False) 

    ttk.Label(left_pane, text="TH√îNG TIN CHI TI·∫æT", style="Title.TLabel") \
       .pack(pady=(15, 10), padx=25, anchor="w")

    # --- T·∫°o Notebook (Tabs) ---
    notebook = ttk.Notebook(left_pane, style="TNotebook")
    notebook.pack(fill="both", expand=True, padx=20, pady=0)

    tab_padding = (15, 10)
    tab1 = ttk.Frame(notebook, style="White.TFrame", padding=tab_padding)
    tab2 = ttk.Frame(notebook, style="White.TFrame", padding=tab_padding)
    tab3 = ttk.Frame(notebook, style="White.TFrame", padding=tab_padding)
    
    # --- THAY ƒê·ªîI: T√™n c√°c Tab ---
    notebook.add(tab1, text=" üë§  C√° nh√¢n ")
    notebook.add(tab2, text=" üìû  Li√™n h·ªá ")
    notebook.add(tab3, text=" üíº  C√¥ng vi·ªác ")

    # T·∫°o tr∆∞·ªùng nh·∫≠p li·ªáu cho nh√¢n vi√™n
    create_form_fields(tab1, FIELD_GROUPS["tab1"]["labels"], FIELD_GROUPS["tab1"]["keys"])
    create_form_fields(tab2, FIELD_GROUPS["tab2"]["labels"], FIELD_GROUPS["tab2"]["keys"])
    create_form_fields(tab3, FIELD_GROUPS["tab3"]["labels"], FIELD_GROUPS["tab3"]["keys"])

    # --- Khung N√∫t Ch·ª©c nƒÉng ---
    button_frame = ttk.Frame(left_pane, style="White.TFrame", padding=(20, 10))
    button_frame.pack(fill="x", side="bottom")

    button_frame.grid_columnconfigure((0, 1), weight=1)
    
    # --- THAY ƒê·ªîI: command=..._staff ---
    add_btn = ttk.Button(button_frame, text="‚ûï Th√™m m·ªõi", style="Primary.TButton", command=add_staff)
    add_btn.grid(row=0, column=0, padx=5, pady=4, sticky="ew")
    update_btn = ttk.Button(button_frame, text="‚úé C·∫≠p nh·∫≠t", style="Primary.TButton", command=update_staff, state="disabled")
    update_btn.grid(row=0, column=1, padx=5, pady=4, sticky="ew")
    delete_btn = ttk.Button(button_frame, text="üóëÔ∏è X√≥a", style="Danger.TButton", command=delete_staff, state="disabled")
    delete_btn.grid(row=1, column=0, padx=5, pady=4, sticky="ew")
    clear_btn = ttk.Button(button_frame, text="‚Üª L√†m m·ªõi", style="Secondary.TButton", command=refresh_all_data)
    clear_btn.grid(row=1, column=1, padx=5, pady=4, sticky="ew")


    # --- KHUNG D·ªÆ LI·ªÜU (B√äN PH·∫¢I) ---
    right_pane = ttk.Frame(main_container, style="White.TFrame",
                           borderwidth=1, relief="solid")
    right_pane.pack(side="right", fill="both", expand=True, padx=(0, 0))

    # --- Header c·ªßa Khung D·ªØ li·ªáu ---
    data_header = ttk.Frame(right_pane, style="White.TFrame")
    data_header.pack(fill="x", padx=15, pady=8)
    
    # --- THAY ƒê·ªîI: Ti√™u ƒë·ªÅ ---
    ttk.Label(data_header, text="DANH S√ÅCH NH√ÇN VI√äN", style="Header.TLabel") \
       .pack(side="left", padx=(5, 0), pady=8)

    # --- THAY ƒê·ªîI: command=search_staff ---
    search_btn = ttk.Button(data_header, text="T√¨m", style="Primary.TButton", command=search_staff)
    search_btn.pack(side="right", padx=(8, 5), pady=8)
    search_entry = ttk.Entry(data_header, width=40, style="TEntry", font=("Segoe UI", 11))
    search_entry.pack(side="right", fill="x", pady=8)
    ttk.Label(data_header, text="üîç", style="TLabel", font=("Segoe UI", 14)) \
       .pack(side="right", padx=(0, 10), pady=8)
    search_entry.bind("<Return>", lambda event: search_staff()) # THAY ƒê·ªîI
    
    # --- Khung Treeview ---
    tree_container = ttk.Frame(right_pane, style="White.TFrame")
    tree_container.pack(fill="both", expand=True, padx=15, pady=(0, 10))

    tree_scroll_y = ttk.Scrollbar(tree_container, orient="vertical")
    tree_scroll_y.pack(side="right", fill="y")
    tree_scroll_x = ttk.Scrollbar(tree_container, orient="horizontal")
    tree_scroll_x.pack(side="bottom", fill="x")
    
    tree = ttk.Treeview(tree_container, columns=ALL_FIELD_KEYS, show="headings", 
                        yscrollcommand=tree_scroll_y.set, 
                        xscrollcommand=tree_scroll_x.set,
                        style="Treeview")
    
    # --- THAY ƒê·ªîI: ƒê·ªãnh nghƒ©a c·ªôt cho Nh√¢n vi√™n ---
    tree.heading("ma_nv", text="M√£ NV")
    tree.column("ma_nv", width=70, minwidth=70, anchor="center", stretch=tk.NO)
    
    tree.heading("ho_ten", text="H·ªç t√™n")
    tree.column("ho_ten", width=160, minwidth=160, stretch=tk.NO)
    
    tree.heading("ngay_sinh", text="Ng√†y sinh")
    tree.column("ngay_sinh", width=100, minwidth=100, anchor="center", stretch=tk.NO)
    
    tree.heading("gioi_tinh", text="Gi·ªõi t√≠nh")
    tree.column("gioi_tinh", width=90, minwidth=70, anchor="center", stretch=tk.NO)
    
    tree.heading("cmnd_cccd", text="CMND/CCCD")
    tree.column("cmnd_cccd", width=130, minwidth=110, stretch=tk.NO)
    
    tree.heading("sdt", text="SƒêT")
    tree.column("sdt", width=100, minwidth=100, stretch=tk.NO)

    tree.heading("email", text="Email")
    tree.column("email", width=180, minwidth=160, stretch=tk.NO)

    tree.heading("que_quan", text="Qu√™ qu√°n")
    tree.column("que_quan", width=120, minwidth=120, stretch=tk.NO)
    
    tree.heading("dia_chi", text="ƒê·ªãa ch·ªâ")
    tree.column("dia_chi", width=200, minwidth=180, stretch=tk.NO)

    tree.heading("chuc_vu", text="Ch·ª©c v·ª•")
    tree.column("chuc_vu", width=100, minwidth=100, stretch=tk.NO)
    
    tree.heading("ngay_vao_lam", text="Ng√†y v√†o l√†m")
    tree.column("ngay_vao_lam", width=110, minwidth=100, anchor="center", stretch=tk.NO)
    
    tree.heading("ca_truc", text="Ca tr·ª±c")
    tree.column("ca_truc", width=90, minwidth=80, anchor="center", stretch=tk.NO)

    tree.heading("luong_cb", text="L∆∞∆°ng CB")
    tree.column("luong_cb", width=100, minwidth=100, anchor="e", stretch=tk.NO)
    
    tree.heading("trang_thai_lv", text="Tr·∫°ng th√°i")
    tree.column("trang_thai_lv", width=100, minwidth=100, anchor="center", stretch=tk.NO)
    
    tree.heading("ghi_chu", text="Ghi ch√∫")
    tree.column("ghi_chu", width=150, minwidth=150, stretch=tk.NO)

    tree.pack(fill="both", expand=True)
    tree_scroll_y.config(command=tree.yview)
    tree_scroll_x.config(command=tree.xview)

    # --- THAY ƒê·ªîI: on_staff_select ---
    tree.bind("<<TreeviewSelect>>", on_staff_select)
    
    populate_sample_data()
    search_entry.focus()


# ==================================
# H√ÄM T·∫†O FORM PH·ª§ TR·ª¢
# ==================================
def create_form_fields(frame, labels, keys):
    global entries
    for i, (label_text, key) in enumerate(zip(labels, keys)):
        ttk.Label(frame, text=label_text, style="TLabel") \
           .grid(row=i, column=0, sticky="e", pady=6, padx=5)
        
        # --- THAY ƒê·ªîI: C·∫≠p nh·∫≠t Combobox cho Nh√¢n vi√™n ---
        if key == "gioi_tinh":
            widget = ttk.Combobox(frame, values=["Nam", "N·ªØ", "Kh√°c"], width=28, state="readonly", style="TCombobox")
        elif key == "chuc_vu":
            widget = ttk.Combobox(frame, values=["Qu·∫£n l√Ω", "B·∫£o v·ªá", "V·ªá sinh", "K·ªπ thu·∫≠t"], width=28, style="TCombobox")
        elif key == "ca_truc":
             widget = ttk.Combobox(frame, values=["S√°ng (6-14h)", "Chi·ªÅu (14-22h)", "ƒê√™m (22-6h)", "H√†nh ch√≠nh"], width=28, style="TCombobox")
        elif key == "trang_thai_lv":
             widget = ttk.Combobox(frame, values=["ƒêang l√†m vi·ªác", "T·∫°m ngh·ªâ", "ƒê√£ ngh·ªâ vi·ªác"], width=28, state="readonly", style="TCombobox")
        elif key == "dia_chi":
             widget = ttk.Entry(frame, width=30, style="TEntry") # C√≥ th·ªÉ d√πng Text widget n·∫øu mu·ªën
        else:
            widget = ttk.Entry(frame, width=30, style="TEntry")
            
        widget.grid(row=i, column=1, pady=6, padx=5, sticky="w")
        entries[key] = widget

# ==================================
# C√ÅC H√ÄM X·ª¨ L√ù LOGIC (ƒê√£ ƒë·ªïi t√™n)
# ==================================

def go_back_to_home(root):
    from app.ui.homepage import show_home_page
    show_home_page(root)

# Gi·ªØ nguy√™n logic clear_form (ƒë√£ s·ª≠a l·ªói)
def clear_form(set_focus=False, clear_tree_selection=True):
    global add_btn, update_btn, delete_btn, entries
    
    for key, entry in entries.items():
        if isinstance(entry, ttk.Combobox):
            entry.set("")
        else:
            entry.config(state="normal")
            entry.delete(0, "end")
            
    if add_btn: add_btn.config(state="normal")
    if update_btn: update_btn.config(state="disabled")
    if delete_btn: delete_btn.config(state="disabled")

    if clear_tree_selection:
        if tree and tree.selection():
            tree.selection_remove(tree.selection()[0])
        
    if set_focus and "ma_nv" in entries:
        entries["ma_nv"].focus()

def refresh_all_data():
    global search_entry, master_data_list, tree
    clear_form()
    if search_entry:
        search_entry.delete(0, "end")
    if tree:
        tree.delete(*tree.get_children())
        for staff in master_data_list:
            tree.insert("", "end", values=staff)

def get_form_data():
    data = []
    for key in ALL_FIELD_KEYS:
        if key in entries:
            data.append(entries[key].get())
        else:
            data.append("")
    return tuple(data)

# Gi·ªØ nguy√™n logic on_select (ƒë√£ s·ª≠a l·ªói)
def on_staff_select(event):
    global add_btn, update_btn, delete_btn, entries, tree
    selected_item = tree.selection()
    if not selected_item: return
    
    selected_item = selected_item[0]
    values = tree.item(selected_item, "values")
    
    clear_form(set_focus=False, clear_tree_selection=False) 
    
    for key, value in zip(ALL_FIELD_KEYS, values):
        if key in entries:
            entry = entries[key]
            if isinstance(entry, ttk.Combobox):
                entry.set(value)
            else:
                entry.insert(0, value)
            
    entries["ma_nv"].config(state="readonly") # Kh√≥a M√£ NV
    
    add_btn.config(state="disabled")
    update_btn.config(state="normal")
    delete_btn.config(state="normal")

# --- THAY ƒê·ªîI: D·ªØ li·ªáu m·∫´u cho Nh√¢n vi√™n ---
def populate_sample_data():
    global master_data_list, tree
    master_data_list = [
        # (ma_nv, ho_ten, ngay_sinh, gioi_tinh, cmnd_cccd, sdt, email, que_quan, dia_chi, chuc_vu, ngay_vao_lam, ca_truc, luong_cb, trang_thai_lv, ghi_chu)
        ("NV001", "Tr·∫ßn VƒÉn H√πng", "15/05/1985", "Nam", "079123456", "0905111222", "tvhung@gmail.com", "An Giang", "123 Tr·∫ßn H∆∞ng ƒê·∫°o, P. M·ªπ B√¨nh", "Qu·∫£n l√Ω", "10/01/2020", "H√†nh ch√≠nh", "10,000,000", "ƒêang l√†m vi·ªác", ""),
        ("NV002", "L√™ Th·ªã Lan", "20/08/1990", "N·ªØ", "088765432", "0912333444", "ltlan@gmail.com", "ƒê·ªìng Th√°p", "456 L√Ω Th∆∞·ªùng Ki·ªát, P. M·ªπ Xuy√™n", "V·ªá sinh", "05/03/2021", "S√°ng (6-14h)", "5,500,000", "ƒêang l√†m vi·ªác", ""),
        ("NV003", "Ph·∫°m VƒÉn Nam", "10/11/1995", "Nam", "066543210", "0987555666", "pvnam@gmail.com", "C·∫ßn Th∆°", "789 Nguy·ªÖn Tr√£i, P. M·ªπ Long", "B·∫£o v·ªá", "20/07/2022", "ƒê√™m (22-6h)", "7,000,000", "ƒêang l√†m vi·ªác", ""),
        ("NV004", "Nguy·ªÖn Th·ªã Hoa", "02/03/1988", "N·ªØ", "099888777", "0333444555", "nthoa@gmail.com", "Ki√™n Giang", "101 T√¥n ƒê·ª©c Th·∫Øng, P. B√¨nh Kh√°nh", "V·ªá sinh", "01/12/2021", "Chi·ªÅu (14-22h)", "5,500,000", "T·∫°m ngh·ªâ", "Ngh·ªâ thai s·∫£n"),
        ("NV005", "L√Ω VƒÉn To√†n", "30/06/1992", "Nam", "055444333", "0777888999", "lvtoan@gmail.com", "An Giang", "222 H√† Ho√†ng H·ªï, P. M·ªπ Xuy√™n", "K·ªπ thu·∫≠t", "15/02/2021", "H√†nh ch√≠nh", "8,000,000", "ƒêang l√†m vi·ªác", "B·∫£o tr√¨ ƒëi·ªán n∆∞·ªõc")
    ]
    refresh_all_data()

# --- C√ÅC H√ÄM CRUD (ƒê√£ ƒë·ªïi t√™n v√† th√¥ng b√°o) ---

def get_root_window():
    if add_btn: return add_btn.winfo_toplevel()
    elif tree: return tree.winfo_toplevel()
    else: return tk._default_root 
        
def add_staff():
    global master_data_list, tree, entries
    data = get_form_data()
    ma_nv, ho_ten = data[0], data[1]
    root_window = get_root_window()
    
    if not ma_nv or not ho_ten:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "M√£ NV v√† H·ªç t√™n l√† b·∫Øt bu·ªôc.", parent=root_window)
        return

    for staff in master_data_list:
        if staff[0] == ma_nv:
            messagebox.showerror("L·ªói", f"M√£ NV [ {ma_nv} ] ƒë√£ t·ªìn t·∫°i!", parent=root_window)
            return
            
    master_data_list.append(data)
    tree.insert("", "end", values=data)
    
    last_item = tree.get_children()[-1]
    tree.selection_set(last_item)
    tree.focus(last_item)
    tree.see(last_item)
    
    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m nh√¢n vi√™n [ {ho_ten} ].", parent=root_window)
    clear_form(set_focus=True)

def update_staff():
    global master_data_list, tree
    root_window = get_root_window()
    
    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt nh√¢n vi√™n ƒë·ªÉ s·ª≠a.", parent=root_window)
        return
    selected_item = selected_item[0]
    
    new_data = get_form_data()
    ma_nv = new_data[0]
    
    tree.item(selected_item, values=new_data)
    
    for i, staff in enumerate(master_data_list):
        if staff[0] == ma_nv:
            master_data_list[i] = new_data
            break
            
    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t nh√¢n vi√™n [ {ma_nv} ].", parent=root_window)
    clear_form()
    
def delete_staff():
    global master_data_list, tree
    root_window = get_root_window()

    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt nh√¢n vi√™n ƒë·ªÉ x√≥a.", parent=root_window)
        return
    selected_item = selected_item[0]
    
    values = tree.item(selected_item, "values")
    ma_nv, ho_ten = values[0], values[1]
    
    if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n:\n\n{ma_nv} - {ho_ten}?", parent=root_window):
        tree.delete(selected_item)
        for staff in master_data_list:
            if staff[0] == ma_nv:
                master_data_list.remove(staff)
                break
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a nh√¢n vi√™n [ {ma_nv} ].", parent=root_window)
        clear_form()

def search_staff():
    global search_entry, master_data_list, tree
    search_term = search_entry.get().lower().strip()
    
    tree.delete(*tree.get_children())
    
    if not search_term:
        for staff in master_data_list:
            tree.insert("", "end", values=staff)
        return
        
    for staff in master_data_list:
        if search_term in str(staff).lower():
            tree.insert("", "end", values=staff)